//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/TouchControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchControls"",
    ""maps"": [
        {
            ""name"": ""Pinch to Zoom"",
            ""id"": ""1fb9174a-969f-459b-9c1c-637b2050aa5b"",
            ""actions"": [
                {
                    ""name"": ""PrimaryFingerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""0b98d4b0-7cc9-431f-9b6d-8de00072391d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryFingerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""12a869e4-e7e2-41bc-9602-3400e0a66617"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""b2c2abf8-6357-4d3b-a9c4-f474eba24a88"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cdc5d75c-a3e7-43d3-8fd0-51cec15a3f17"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryFingerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9a85919-e55a-4304-8fb4-065b0aa3e08b"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryFingerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f637707b-bb05-42d5-8e7a-2a1a866f56dd"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Click"",
            ""id"": ""d2451b63-4f8d-45ef-b862-94b9b8f45939"",
            ""actions"": [
                {
                    ""name"": ""PrimaryFingerClicked"",
                    ""type"": ""Button"",
                    ""id"": ""fca834dc-bf4f-48d2-84fb-f5821be982ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a881f9eb-1c45-43fd-9067-058c76a0ff0a"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryFingerClicked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""465bb2db-9168-4a64-aa5a-5737c474aaba"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryFingerClicked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Pinch to Zoom
        m_PinchtoZoom = asset.FindActionMap("Pinch to Zoom", throwIfNotFound: true);
        m_PinchtoZoom_PrimaryFingerPosition = m_PinchtoZoom.FindAction("PrimaryFingerPosition", throwIfNotFound: true);
        m_PinchtoZoom_SecondaryFingerPosition = m_PinchtoZoom.FindAction("SecondaryFingerPosition", throwIfNotFound: true);
        m_PinchtoZoom_SecondaryTouchContact = m_PinchtoZoom.FindAction("SecondaryTouchContact", throwIfNotFound: true);
        // Click
        m_Click = asset.FindActionMap("Click", throwIfNotFound: true);
        m_Click_PrimaryFingerClicked = m_Click.FindAction("PrimaryFingerClicked", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Pinch to Zoom
    private readonly InputActionMap m_PinchtoZoom;
    private IPinchtoZoomActions m_PinchtoZoomActionsCallbackInterface;
    private readonly InputAction m_PinchtoZoom_PrimaryFingerPosition;
    private readonly InputAction m_PinchtoZoom_SecondaryFingerPosition;
    private readonly InputAction m_PinchtoZoom_SecondaryTouchContact;
    public struct PinchtoZoomActions
    {
        private @TouchControls m_Wrapper;
        public PinchtoZoomActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryFingerPosition => m_Wrapper.m_PinchtoZoom_PrimaryFingerPosition;
        public InputAction @SecondaryFingerPosition => m_Wrapper.m_PinchtoZoom_SecondaryFingerPosition;
        public InputAction @SecondaryTouchContact => m_Wrapper.m_PinchtoZoom_SecondaryTouchContact;
        public InputActionMap Get() { return m_Wrapper.m_PinchtoZoom; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PinchtoZoomActions set) { return set.Get(); }
        public void SetCallbacks(IPinchtoZoomActions instance)
        {
            if (m_Wrapper.m_PinchtoZoomActionsCallbackInterface != null)
            {
                @PrimaryFingerPosition.started -= m_Wrapper.m_PinchtoZoomActionsCallbackInterface.OnPrimaryFingerPosition;
                @PrimaryFingerPosition.performed -= m_Wrapper.m_PinchtoZoomActionsCallbackInterface.OnPrimaryFingerPosition;
                @PrimaryFingerPosition.canceled -= m_Wrapper.m_PinchtoZoomActionsCallbackInterface.OnPrimaryFingerPosition;
                @SecondaryFingerPosition.started -= m_Wrapper.m_PinchtoZoomActionsCallbackInterface.OnSecondaryFingerPosition;
                @SecondaryFingerPosition.performed -= m_Wrapper.m_PinchtoZoomActionsCallbackInterface.OnSecondaryFingerPosition;
                @SecondaryFingerPosition.canceled -= m_Wrapper.m_PinchtoZoomActionsCallbackInterface.OnSecondaryFingerPosition;
                @SecondaryTouchContact.started -= m_Wrapper.m_PinchtoZoomActionsCallbackInterface.OnSecondaryTouchContact;
                @SecondaryTouchContact.performed -= m_Wrapper.m_PinchtoZoomActionsCallbackInterface.OnSecondaryTouchContact;
                @SecondaryTouchContact.canceled -= m_Wrapper.m_PinchtoZoomActionsCallbackInterface.OnSecondaryTouchContact;
            }
            m_Wrapper.m_PinchtoZoomActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PrimaryFingerPosition.started += instance.OnPrimaryFingerPosition;
                @PrimaryFingerPosition.performed += instance.OnPrimaryFingerPosition;
                @PrimaryFingerPosition.canceled += instance.OnPrimaryFingerPosition;
                @SecondaryFingerPosition.started += instance.OnSecondaryFingerPosition;
                @SecondaryFingerPosition.performed += instance.OnSecondaryFingerPosition;
                @SecondaryFingerPosition.canceled += instance.OnSecondaryFingerPosition;
                @SecondaryTouchContact.started += instance.OnSecondaryTouchContact;
                @SecondaryTouchContact.performed += instance.OnSecondaryTouchContact;
                @SecondaryTouchContact.canceled += instance.OnSecondaryTouchContact;
            }
        }
    }
    public PinchtoZoomActions @PinchtoZoom => new PinchtoZoomActions(this);

    // Click
    private readonly InputActionMap m_Click;
    private IClickActions m_ClickActionsCallbackInterface;
    private readonly InputAction m_Click_PrimaryFingerClicked;
    public struct ClickActions
    {
        private @TouchControls m_Wrapper;
        public ClickActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryFingerClicked => m_Wrapper.m_Click_PrimaryFingerClicked;
        public InputActionMap Get() { return m_Wrapper.m_Click; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ClickActions set) { return set.Get(); }
        public void SetCallbacks(IClickActions instance)
        {
            if (m_Wrapper.m_ClickActionsCallbackInterface != null)
            {
                @PrimaryFingerClicked.started -= m_Wrapper.m_ClickActionsCallbackInterface.OnPrimaryFingerClicked;
                @PrimaryFingerClicked.performed -= m_Wrapper.m_ClickActionsCallbackInterface.OnPrimaryFingerClicked;
                @PrimaryFingerClicked.canceled -= m_Wrapper.m_ClickActionsCallbackInterface.OnPrimaryFingerClicked;
            }
            m_Wrapper.m_ClickActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PrimaryFingerClicked.started += instance.OnPrimaryFingerClicked;
                @PrimaryFingerClicked.performed += instance.OnPrimaryFingerClicked;
                @PrimaryFingerClicked.canceled += instance.OnPrimaryFingerClicked;
            }
        }
    }
    public ClickActions @Click => new ClickActions(this);
    public interface IPinchtoZoomActions
    {
        void OnPrimaryFingerPosition(InputAction.CallbackContext context);
        void OnSecondaryFingerPosition(InputAction.CallbackContext context);
        void OnSecondaryTouchContact(InputAction.CallbackContext context);
    }
    public interface IClickActions
    {
        void OnPrimaryFingerClicked(InputAction.CallbackContext context);
    }
}
